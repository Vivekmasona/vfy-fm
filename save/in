
    <script>
        // Function to get URL parameter by name
        function getParameterByName(name, url = window.location.href) {
            name = name.replace(/[]/g, '\\$&');
            const regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),
                  results = regex.exec(url);
            if (!results) return null;
            if (!results[2]) return '';
            return decodeURIComponent(results[2].replace(/\+/g, ' '));
        }

        // Main function to start the download
        async function startDownload() {
            const videoId = getParameterByName('id');
            if (!videoId) {
                //alert("No video ID provided in the URL.");
                return;
            }

            const videoUrl = `https://www.youtube.com/watch?v=${videoId}`;
            await downloadMP3(videoUrl);
        }

        // Function to download MP3 from Cococo API
        async function downloadMP3(videoUrl) {
            const format = 'mp3';
            const apiKey = 'dfcb6d76f2f6a9894gjkege8a4ab232222'; // Replace with your actual API key
            const initialApiUrl = `https://ab.cococococ.com/ajax/download.php?format=${format}&url=${encodeURIComponent(videoUrl)}&api=${apiKey}`;
            
            try {
                // Step 1: Start the download and get the ID
                const initialResponse = await fetch(initialApiUrl);
                const initialData = await initialResponse.json();

                if (!initialData.success || !initialData.id) {
                    alert("Failed to start MP3 conversion.");
                    return;
                }

                const id = initialData.id;
                const progressApiUrl = `https://p.oceansaver.in/ajax/progress.php?id=${id}`;
                let downloadUrl = null;

                // Step 2: Poll for the download URL until conversion is complete
                while (true) {
                    const progressResponse = await fetch(progressApiUrl);
                    const progressData = await progressResponse.json();

                    if (progressData.download_url) {
                        downloadUrl = progressData.download_url;
                        break;
                    }

                    if (progressData.progress >= 1000) {
                        alert("Conversion failed or no download URL available.");
                        return;
                    }

                    // Wait before checking again
                    await new Promise(resolve => setTimeout(resolve, 3000));
                }

                // Step 3: Download the MP3
                if (downloadUrl) {
                    // Automatically trigger download by creating an invisible link
                    const a = document.createElement('a');
                    a.href = downloadUrl;
                    a.download = `download.mp3`;  // Set a filename
                    a.style.display = 'none';
                    document.body.appendChild(a);
                    a.click();
                    document.body.removeChild(a);
                } else {
                    alert("Conversion failed or no download URL available.");
                }
            } catch (error) {
                console.error("Error:", error);
                alert("An error occurred while trying to download the MP3.");
            }
        }

        // Run the download function when the page loads
        window.onload = startDownload;
    </script>

</!doctype>
