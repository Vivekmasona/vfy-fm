const express = require('express');
const gTTS = require('google-tts-api');
const ffmpeg = require('fluent-ffmpeg');
const https = require('https');
const fs = require('fs');
const path = require('path');

const app = express();
const PORT = process.env.PORT || 3000;

// Helper to download file
function downloadFile(url, outputPath) {
  return new Promise((resolve, reject) => {
    const file = fs.createWriteStream(outputPath);
    https.get(url, (res) => {
      res.pipe(file);
      file.on('finish', () => file.close(resolve));
      res.on('error', reject);
    }).on('error', reject);
  });
}

// Split long text into ~180 character chunks
function splitText(text, limit = 180) {
  const chunks = [];
  while (text.length > 0) {
    let chunk = text.slice(0, limit);
    const lastSpace = chunk.lastIndexOf(' ');
    if (lastSpace > 0) chunk = chunk.slice(0, lastSpace);
    chunks.push(chunk.trim());
    text = text.slice(chunk.length).trim();
  }
  return chunks;
}

// Voice effects using ffmpeg
const voiceFilters = [
  'asetrate=44100*0.66',
  'atempo=1.10',
  'bass=g=20',
  'aecho=0.8:0.88:60:0.22',
  'equalizer=f=100:width_type=h:width=200:g=8',
  'dynaudnorm=p=0.9'
];

// Default route with a sample intro
app.get('/', async (req, res) => {
  const text = 'Namaste, main vfy AI hoon. Mujhe Vivek masonawale ne banaya hai.';
  const lang = 'hi-IN';

  const ttsPath = path.join(__dirname, 'intro.mp3');
  const voiceFxPath = path.join(__dirname, 'introfx.mp3');

  try {
    const url = gTTS.getAudioUrl(text, { lang, slow: false });

    await downloadFile(url, ttsPath);

    await new Promise((resolve, reject) => {
      ffmpeg(ttsPath)
        .audioFilters(voiceFilters)
        .audioBitrate(192)
        .save(voiceFxPath)
        .on('end', resolve)
        .on('error', reject);
    });

    res.setHeader('Content-Type', 'audio/mpeg');
    const stream = fs.createReadStream(voiceFxPath);
    stream.pipe(res);
    stream.on('end', () => {
      [ttsPath, voiceFxPath].forEach(p => fs.existsSync(p) && fs.unlinkSync(p));
    });

  } catch (err) {
    console.error('Error:', err.message);
    res.status(500).send('Intro TTS failed');
  }
});

// Long text TTS route
app.get('/tts', async (req, res) => {
  const text = req.query.text || 'Thanks for using this long-text speech API.';
  const lang = req.query.lang || 'hi-IN';

  const timestamp = Date.now().toString();
  const tempDir = path.join(__dirname, `tmp-${timestamp}`);
  fs.mkdirSync(tempDir);

  try {
    const chunks = splitText(text);
    const audioFiles = [];

    for (let i = 0; i < chunks.length; i++) {
      const chunk = chunks[i];
      const url = gTTS.getAudioUrl(chunk, { lang, slow: false });
      const chunkPath = path.join(tempDir, `part_${i}.mp3`);
      await downloadFile(url, chunkPath);
      audioFiles.push(chunkPath);
    }

    const listFile = path.join(tempDir, 'list.txt');
    fs.writeFileSync(listFile, audioFiles.map(file => `file '${file}'`).join('\n'));

    const mergedPath = path.join(tempDir, 'merged.mp3');
    await new Promise((resolve, reject) => {
      ffmpeg()
        .input(listFile)
        .inputOptions('-f', 'concat', '-safe', '0')
        .outputOptions('-c', 'copy')
        .save(mergedPath)
        .on('end', resolve)
        .on('error', reject);
    });

    const outputPath = path.join(tempDir, 'output.mp3');
    await new Promise((resolve, reject) => {
      ffmpeg(mergedPath)
        .audioFilters(voiceFilters)
        .audioBitrate(192)
        .save(outputPath)
        .on('end', resolve)
        .on('error', reject);
    });

    res.download(outputPath, 'vfy-ai-tts.mp3', () => {
      fs.rmSync(tempDir, { recursive: true, force: true });
    });

  } catch (err) {
    console.error('Error:', err.message);
    res.status(500).send('TTS generation or audio processing failed');
    if (fs.existsSync(tempDir)) fs.rmSync(tempDir, { recursive: true, force: true });
  }
});

app.listen(PORT, () => {
  console.log(`Server running at http://localhost:${PORT}`);
});
